@prefix ex: <http://example.org/> .
@prefix math: <http://www.w3.org/2000/10/swap/math#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix test: <https://w3c.github.io/N3/tests/test.n3#>.
@prefix : <math2.n3#>.

<#> rdfs:comment "Tests for math builtins" .

{ (1 2 3) math:sum 6 } => { :sum1 :has 6 } .
{ (1 2 3) math:sum 7 } => { :sum2 a :FAILURE } .
{ (4 5 6) math:sum ?sum } => { :sum3 :has ?sum } .
{ (1 2.1 3) math:sum ?sum . (?sum 1) math:roundedTo ?ro } => { :sum4 :has ?ro } .
{ (1 2.1e1 3) math:sum ?sum } => { :sum5 :has ?sum } .
{ (1 2.1e1 3) math:sum "25"^^xsd:double } => { :sum6 a :SUCCESS } .

4 :in :n1 .
6 :in :n2 .
{ ?n1 :in :n1 . ?n2 :in :n2 . (?n1 ?n2) math:sum ?sum } => { :sum7 :has ?sum } .

(5 7) :in :inlist .
{ ?l :in :inlist . ?l math:sum ?sum } => { :sum8 :has ?sum } . 
{ ("a" "1") math:sum ?sum } => { :sum9 :has ?sum } .
{ ("1"^^xsd:int "2"^^xsd:int) math:sum ?sum } => { :sum10 :has ?sum } .
{ (1 2) math:sum ?sum . ?sum math:equalTo "3.0"^^xsd:double } => { :sum11 :has 3.0 } .
{ (1 2) math:sum "3.0"^^xsd:double } => { :sum12 :has 3.0 } .
{ (1 2) math:sum "a" } => { :sum13 :has ?sum } .

{ (1 2) math:difference ?diff } => { :diff1 :has ?diff } .
{ (2 1) math:difference 1 } => { :diff2 :has 1 } .

{ (1 2 3) math:product ?prod } => { :prod1 :has ?prod } .
{ (1 2 3) math:product 6 } => { :prod2 a :SUCCESS } .
{ (1 2.1 3) math:product ?prod . (?prod 4) math:roundedTo ?ro } => { :prod3 :has ?ro } .

{ (6 3) math:quotient "2"^^xsd:decimal } => { :quot1 :has 2 } .
{ (6 3) math:quotient ?quot } => { :quot2 :has ?quot } .
{ (7 3) math:quotient ?quot . (?quot 4) math:roundedTo ?ro } => { :quot3 :has ?ro } .
{ (7 3 3) math:quotient ?quot . (?quot 4) math:roundedTo ?ro } => { :quot4 :has ?ro } .

{ (2 3) math:exponentiation ?exp } => { :exp1 :has ?exp } .
{ (5 4) math:remainder 1 } => { :rem1 a :SUCCESS } .
{ (100 10) math:logarithm ?log . (?log 2) math:roundedTo ?ro } => { :log1 :has ?ro } .

{ 1 math:negation ?neg } => { :neg1 :has ?neg } .
{ ?or math:negation ?neg } => { :neg2 a :FAILURE } .
{ ?or math:negation -1 } => { :neg3 :has ?or } .
{ -1 math:negation 1 } => { :neg4 a :SUCCESS } .
{ 1 math:negation "b" } => { :neg5 a :FAILURE } .
{ -1 math:negation ?neg } => { :neg6 :has ?neg } .

{ -1.0e0 math:absoluteValue ?abs } => { :abs1 :has ?abs } .
{ -1.0e0 math:absoluteValue 1.0e0 } => { :abs2 a :SUCCESS } .
{ ?or math:absoluteValue 19 } => { :abs3 a :FAILURE } .

{ (1.37 0) math:roundedTo 1 } => { :rou1 a :SUCCESS } .
{ (1.96 1) math:roundedTo ?rou } => { :rou2 :has ?rou } .
{ 1.37 math:ceiling 2 } => { :ceil1 a :SUCCESS } .
{ 1.96 math:floor 1 } => { :flo1 a :SUCCESS } .